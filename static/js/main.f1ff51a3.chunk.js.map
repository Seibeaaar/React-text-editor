{"version":3,"sources":["redux/reducers/editReducer.js","redux/constants/index.js","redux/reducers/rootReducer.js","components/ContentEditable/index.js","components/EditForm/NumberElement/index.js","components/EditForm/ColorElement/index.js","components/EditForm/index.js","redux/actions/index.js","App.js","index.js"],"names":["initialState","elements","text","color","fontSize","backgroundColor","id","editableFeatures","findCurrentElement","arr","indexOf","filter","item","editReducer","state","action","type","size","console","log","map","element","JSON","stringify","toString","rootReducer","combineReducers","edit","ContentEditable","content","active","changeText","contentEditable","suppressContentEditableWarning","style","onFocus","NumberElement","useState","editSize","className","onChange","e","target","value","defaultValue","min","max","onClick","parseInt","ColorElement","editColor","initialValue","placement","hex","connect","features","setColor","setBackground","setFontsize","feature","includes","toJSON","setActive","activeHandler","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1ff51a3.chunk.js","sourcesContent":["import { SET_COLOR, SET_FONTSIZE, SET_BACKGROUND, TO_JSON } from '../constants';\r\n\r\n// setting initial value of state to pass it in a reducer as a default value\r\nconst initialState = {\r\n  elements: [{ \r\n    text: 'Hello world',\r\n    color: '#000',\r\n    fontSize: 20,\r\n    backgroundColor: '#fff',\r\n    id: '231342221'\r\n  }, \r\n  {\r\n    text: 'React',\r\n    color: 'red',\r\n    fontSize: 24,\r\n    backgroundColor: '#f3f3f3',\r\n    id: '214245353'\r\n  }],\r\n  editableFeatures: ['color', 'background color', 'font size']\r\n}\r\n\r\n// function to easily find the index of element in edit\r\nconst findCurrentElement = (arr, id) => {\r\n  return arr.indexOf(arr.filter(item => item.id === id)[0]);\r\n}\r\n\r\nconst editReducer = (state = initialState, action) => {\r\n  // making a copy of elements from state to avoid direct mutation of state\r\n  const elements = [...state.elements];\r\n  switch(action.type) {\r\n    case SET_COLOR: \r\n      elements[findCurrentElement(state.elements, action.id)].color = action.color;\r\n      return {...state, elements};\r\n    case SET_FONTSIZE:\r\n      elements[findCurrentElement(state.elements, action.id)].fontSize = action.size;\r\n      return {...state, elements};\r\n    case SET_BACKGROUND:\r\n      elements[findCurrentElement(state.elements, action.id)].backgroundColor = action.color;\r\n      return {...state, elements};\r\n    case TO_JSON:\r\n      console.log(elements.map(element => {\r\n        delete element.id;\r\n        return JSON.stringify(element);\r\n      }).toString())\r\n      return state;\r\n    default :\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default editReducer;\r\n","export const SET_COLOR = 'SET_COLOR';\r\nexport const SET_FONTSIZE = 'SET_FONTSIZE';\r\nexport const SET_BACKGROUND = 'SET_BACKGROUND';\r\nexport const TO_JSON = 'TO_JSON';","import { combineReducers } from 'redux';\r\nimport editReducer from './editReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  edit: editReducer\r\n})","import React from 'react';\r\n\r\nconst ContentEditable = ({ content, color, fontSize, backgroundColor, active, id, changeText }) => {\r\n  return (\r\n    <>\r\n      {/* getting styles, id and active as a callback from App component */}\r\n      {/* Setting inline styles for span element, setting suppress contenteditable warning to true to avoid warnings from React  */}\r\n      <span contentEditable suppressContentEditableWarning={ true } \r\n      style={{color, fontSize, backgroundColor}} onFocus={() => {\r\n        active(id);\r\n      }}>{content}</span>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ContentEditable;","import React, { useState } from 'react';\r\n\r\nconst NumberElement = ({active, content, action}) => {\r\n  const [size, editSize] = useState(10);\r\n  return (\r\n    <div className=\"input__container\">\r\n      <input type=\"number\" onChange={(e) => {\r\n        editSize(e.target.value);\r\n      }} defaultValue={size} min=\"10\" max=\"100\" className=\"input__number\" />\r\n      <button onClick={() => action(parseInt(size), active)} className=\"btn__handler\">{content}</button> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NumberElement;","import React, { useState } from 'react';\r\nimport InputColor from 'react-input-color';\r\n\r\nconst ColorElement = ({ active, content, action }) => {\r\n  const [color, editColor] = useState({});\r\n  return (\r\n    <div className=\"input__container\">\r\n      <InputColor initialValue=\"#000\" placement=\"right\" onChange={editColor} />\r\n      <button onClick={() => action(color.hex, active)} className=\"btn__handler\">{content}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ColorElement;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './EditForm.css';\r\nimport NumberElement from './NumberElement';\r\nimport ColorElement from './ColorElement';\r\nimport { setColor, setBackground, setFontsize} from '../../redux/actions';\r\n\r\nconst EditForm = ({ active, features, setColor, setBackground, setFontsize }) => {\r\n  return (\r\n    // relying on feature renders sufficient input element and passing proper action to it\r\n    <div className=\"editForm__container\">\r\n      { features.map(feature => feature.includes('size') ? <NumberElement active={active} content={feature} action={setFontsize} /> \r\n      : <ColorElement active={active} content={feature} action={feature.includes('background') ? setBackground : setColor} />)}\r\n    </div> \r\n  )\r\n}\r\n\r\n// getting all features (styles) that can be mutated in application\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    features: state.edit.editableFeatures\r\n  }\r\n}\r\n\r\n// getting all actions needed and connecting component with redux passing state (mapped to props) and actions\r\n\r\nexport default connect(mapStateToProps, { setColor, setBackground, setFontsize })(EditForm);","import { SET_COLOR, SET_FONTSIZE,SET_BACKGROUND, TO_JSON } from '../constants'\r\n\r\n// passes color and id of element\r\nexport const setColor = (color, id) => {\r\n  return {\r\n    type: SET_COLOR,\r\n    color,\r\n    id\r\n  }\r\n}\r\n\r\n// passes font size and id of element\r\nexport const setFontsize = (size, id) => {\r\n  return {\r\n    type: SET_FONTSIZE,\r\n    size,\r\n    id\r\n  }\r\n}\r\n\r\n// passes background color and id of element\r\nexport const setBackground = (color, id) => {\r\n  return {\r\n    type: SET_BACKGROUND,\r\n    color,\r\n    id\r\n  }\r\n}\r\n\r\n// invokes reducer to put information about elements and their styles in console\r\nexport const toJSON = () => {\r\n  return {\r\n    type: TO_JSON\r\n  }\r\n}\r\n\r\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { toJSON } from './redux/actions';\nimport ContentEditable from './components/ContentEditable';\nimport EditForm from './components/EditForm';\nimport './App.css';\n\nconst App = ({ content, toJSON }) => {\n  // hooks and handler to get an id of element in edit\n  const [active, setActive] = useState('');\n  const activeHandler = (id) => {\n    setActive(id);\n  }\n  return (\n    <>\n      <div className=\"app__container\">\n        {/* render elements that component got from state */}\n        { content.map(item => <ContentEditable \n        content={item.text} color={item.color} fontSize={item.fontSize} backgroundColor={item.backgroundColor} active={activeHandler} id={item.id}/>) }\n        <EditForm active={active}/>\n        \n      </div>\n      {/* displays all elements with styles in console (JSON format) */}\n      <button onClick={() => toJSON()} className=\"json__btn\">To JSON</button>\n    </>\n  );\n}\n\n// Getting all editable elements and their styles and id from state\nconst mapStateToProps = (state) => {\n  return {\n    content: state.edit.elements\n  }\n}\n\nexport default connect(mapStateToProps, { toJSON })(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './redux/reducers/rootReducer';\nimport './index.css';\nimport App from './App';\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}